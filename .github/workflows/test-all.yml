#
# This workflow is run either by a manual workflow dispatch, or
# as part of a pull request check.
#
# It builds a version of GAP (which one depends on its inputs), then builds
# all packages (resp. all matching some glob), then runs the tests of all
# packages (resp. all matching some glob) with a testfile. Finally the various
# test results are aggregated into a JSON file which other workflows can
# process.
#
name: "Test packages"

on:
  workflow_dispatch:
    inputs:
      which-gap:
        description: 'Either a GAP branch name or a GAP version'
        required: true
        type: string
        default: master # or 4.11.1 or ...
      pkg-build-glob:
        description: 'Only build packages matching the given glob'
        required: false
        type: string
        default: "*"
      pkg-test-glob:
        description: 'Only test packages matching the given glob'
        required: false
        type: string
        default: "*"
  workflow_call:
    inputs:
      which-gap:
        description: 'Either a GAP branch name or a GAP version'
        required: true
        type: string
        default: master # or 4.11.1 or ...
      pkg-build-glob:
        description: 'Only build packages matching the given glob'
        required: false
        type: string
        default: "*"
      pkg-test-glob:
        description: 'Only test packages matching the given glob'
        required: false
        type: string
        default: "*"

jobs:
  build:
    name: "Build GAP and packages"
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.get-names.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2

      # Cache the package archives we download across runs of this job
      # to speed up things considerably
      - name: "Cache archives"
        uses: actions/cache@v2
        with:
          path: _archives
          key: archives-${{ hashFiles('packages/*/meta.json') }}
          restore-keys: |
            archives-

      - name: "Install package distribution tools"
        run: python -m pip install -r tools/requirements.txt

      # TOOD: dependencies should come from a container
      - name: "Install binary package dependencies"
        run: |
          deps=$(tools/gather_dependencies.py packages/*/meta.json)
          if [[ -n "$deps" ]]; then
            echo "Installing required binary depedencies: $deps"
            sudo apt-get install --no-install-recommends $deps
          else
            echo "No required binary depedencies to be installed"
          fi

      - name: "Download packages"
        run: tools/download_packages.py packages/*/meta.json

      - name: "Cleanup archives"
        run: tools/cleanup_archives.py

      # Setup ccache, to speed up repeated compilation of the same binaries
      # (i.e., GAP and the packages)
      - name: "Setup ccache"
        uses: Chocobo1/setup-ccache-action@v1
        with:
          update_packager_index: false

      # TOOD: gap should come from a container
      - name: "Install GAP"
        run: |
          echo "::group::fetch"
          whichgap="${{ github.event.inputs.which-gap || inputs.which-gap }}"
          if [[ "${whichgap}" == 4.* ]]; then
            # assume it is a tag
            wget --quiet https://github.com/gap-system/gap/releases/download/v${whichgap}/gap-${whichgap}-core.tar.gz
            tar xf gap-${whichgap}-core.tar.gz
            rm gap-${whichgap}-core.tar.gz
            mv gap-${whichgap} $HOME/gap
          else
            git clone --depth=2 -b ${whichgap} https://github.com/gap-system/gap.git $HOME/gap
          fi
          cd $HOME/gap
          echo "::endgroup::"

          echo "::group::autogen"
          ./autogen.sh
          echo "::endgroup::"

          echo "::group::configure"
          ./configure
          echo "::endgroup::"

          echo "::group::make"
          make -j4
          echo "::endgroup::"

          # put GAP into PATH
          ln -s $HOME/gap/bin/gap.sh /usr/local/bin/gap

      - name: "Extract packages"
        run: |
          mkdir -p $HOME/gap/pkg
          cd $HOME/gap/pkg
          #tar xvf $HOME/packages.tar.gz
          for f in $GITHUB_WORKSPACE/_archives/* ; do
            case "$f" in
              *.tar.*)
                echo "Extracting $f"
                tar xf "$f"
              ;;
              *.zip)
                echo "Extracting $f"
                unzip "$f"
              ;;
              *)
                echo "Skipping $f"
              ;;
            esac
          done

      - name: "Build packages"
        run: |
          cd $HOME/gap/pkg

          # HACK: prevent BuildPackages.sh from building the Normaliz verison
          # "bundled" with NormalizInterface, as this is very slow (takes 5-10
          # minutes). Instead we want it to use libnormaliz-dev installed by
          # us
          rm -f */build-normaliz.sh

          # skip xgap: no X11 headers, and no means to test it
          rm -rf xgap*

          # HACK/WORKAROUND: atlasrep's TestFile sets an exit code but does not
          # actually exit, thus we can't properly detect whether it passed or
          # failed (and count that as a failur). So we hack around that...
          echo "QUIT;" >> atlasrep*/tst/testauto.g

          # HACK/WORKAROUND: ctbllib's TestFile sets an exit code but does not
          # actually exit, thus we can't properly detect whether it passed or
          # failed (and count that as a failur). So we hack around that...
          echo "QUIT;" >> ctbllib*/tst/testauto.g

          MAKEFLAGS=-j3 ../bin/BuildPackages.sh --strict ${{ github.event.inputs.pkg-build-glob || inputs.pkg-build-glob }}

      # TODO: the following is disabled because right now it FAILS due to IsSymmetric
      # conflicting between LAGUNA and numericalsgps (authors are already informed,
      # solution is being worked on)
      #- name: "Test LoadAllPackages"
      #  run: |
      #    gap --quitonbreak -r -c "SetInfoLevel(InfoPackageLoading, PACKAGE_DEBUG);LoadAllPackages();QUIT;"

      - name: "Create tarball"
        run: |
          cd $HOME
          tar --exclude-vcs --exclude=build --exclude=.libs -cf gap.tar.zst gap

      - name: "Upload GAP with packages as artifact"
        uses: actions/upload-artifact@v2
        with:
          name: gap-${{ github.event.inputs.which-gap || inputs.which-gap }}
          path: /home/runner/gap.tar.zst

      - name: "Creates jobs for matching packages"
        id: get-names
        run: |
            MATRIX="{\"package\":["
            for PKG in packages/${{ github.event.inputs.pkg-test-glob || inputs.pkg-test-glob }}/meta.json; do
              PKG=${PKG%"/meta.json"}
              PKG=${PKG#"packages/"}
              # if [[ ${PKG} == anupq ]]; then
              #   break # FIXME: HACK for faster testing, remove before merge
              # fi
              # skip packages without a TestFile
              if ! jq -e -r '.TestFile' < packages/${PKG}/meta.json > /dev/null ; then
                echo "Skipping ${PKG}"
                continue
              fi
              if [[ ${PKG} == xgap ]]; then
                # skip xgap: no X11 headers, and no means to test it
                continue
              fi
              MATRIX="${MATRIX}\"${PKG}\","
            done
            MATRIX="${MATRIX}]}"
            echo "::set-output name=matrix::$MATRIX"

  test-package:
    name: "${{ matrix.package }}"
    if: ${{ needs.build.outputs.matrix != '{"package":[]}' }}
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.build.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v2

      - name: "Install package distribution tools"
        run: |
          python -m pip install -r tools/requirements.txt
          if [[ ${{ matrix.package }} == polycyclic ]]; then
            # HACK FIXME TODO: skip polycyclic for now
            echo "SKIPPING polycycylic tests for now, as they run in an infinite (?) loop"
            echo "Re-enable them once there is a new polycyclic release"
            exit 1
          fi

      - name: "Download GAP from previous job"
        uses: actions/download-artifact@v2
        with:
          name: gap-${{ github.event.inputs.which-gap || inputs.which-gap }}

      - name: "Extract GAP artifact"
        run: |
          cd $HOME
          tar xvf $GITHUB_WORKSPACE/gap.tar.zst
          ln -s $HOME/gap/bin/gap.sh /usr/local/bin/gap
          cd $GITHUB_WORKSPACE

      - name: "Install binary package dependencies"
        run: |
          deps=$(tools/gather_dependencies.py ${{ matrix.package }})
          if [[ -n "$deps" ]]; then
            echo "Installing required binary depedencies: $deps"
            sudo apt-get install --no-install-recommends $deps
          else
            echo "No required binary depedencies to be installed"
          fi

      - name: "Run tests"
        timeout-minutes: 10
        id: tests-default
        run: |
          PKG=${{ matrix.package }}
          gap --quitonbreak -r -c "
                SetInfoLevel(InfoPackageLoading, PACKAGE_DEBUG);
                LoadPackage(\"$PKG\");
                SetInfoLevel(InfoPackageLoading, PACKAGE_WARNING);
                res:=TestPackage(\"$PKG\");
                FORCE_QUIT_GAP(res);
                "

      - name: "Run tests with OnlyNeeded"
        timeout-minutes: 10
        id: tests-only-needed
        if: ${{ always() }}
        run: |
          PKG=${{ matrix.package }}
          gap -A --quitonbreak -r -c "
                SetInfoLevel(InfoPackageLoading, PACKAGE_DEBUG);
                LoadPackage(\"$PKG\" : OnlyNeeded);
                SetInfoLevel(InfoPackageLoading, PACKAGE_WARNING);
                res:=TestPackage(\"$PKG\");
                FORCE_QUIT_GAP(res);
                "

      # https://docs.github.com/en/actions/learn-github-actions/contexts#steps-context
      # steps.<id>.outcome possible values are success, failure, cancelled, or skipped.
      - name: "Create job status json-file"
        if: ${{ always() }}
        run: |
          PKG="${{ matrix.package }}"
          STATUS_DEFAULT="${{ steps.tests-default.outcome }}"
          STATUS_ONLY_NEEDED="${{ steps.tests-only-needed.outcome }}"
          echo "{\"status_default\": \"$STATUS_DEFAULT\", \"status_only_needed\": \"$STATUS_ONLY_NEEDED\"}" > ${PKG}.json
          cat ${PKG}.json

      - name: "Upload job status as artifact"
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: "reports-${{ matrix.package }}"
          path: "${{ matrix.package }}.json"

  report:
    name: "Report"
    needs: test-package
    if: ${{ always() }}
    runs-on: ubuntu-latest
    outputs:
      test-status: ${{ steps.test-status.outputs.test-status }}
    steps:
      - uses: actions/checkout@v2

      - name: "Create _reports directory"
        run: |
          mkdir -p _reports

      - name: "Download every job status"
        uses: elonh/download-artifact-regexp@master # FIXME/TODO: Switch to actions/download-artifact once they officially support wildcards, see https://github.com/actions/download-artifact/issues/6
        with:
          pattern: reports-*
          path: _reports

      # warning/error in utils.py throw a syntax error with default version of python
      - name: "Set up Python 3.7"
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: "Install package distribution tools"
        run: |
          python -m pip install -r tools/requirements.txt

      - name: "Generate test-status.json"
        id: report
        run: python tools/generate_test_status.py ${{ github.repository }} "$GITHUB_RUN_ID" "$GITHUB_SHA" $(git rev-parse --short "$GITHUB_SHA")

      - name: "Output test-status"
        id: test-status
        run: |
          TEST_STATUS=$(cat test-status.json)
          echo "::set-output name=test-status::$TEST_STATUS"
