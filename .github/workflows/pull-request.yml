name: "Test pull requests"

on:
  workflow_dispatch:  # manual trigger for debugging
  pull_request:

concurrency:
  # group by workflow and ref
  group: ${{ github.workflow }}-${{ github.ref }}
  # Cancel intermediate builds, but only if it is a pull request build.
  cancel-in-progress: true

jobs:
  detect-changes:
    name: "Detect affected packages"
    runs-on: ubuntu-latest
    outputs:
      remove-matrix: ${{ steps.detect-removals.outputs.matrix }}
      update-matrix: ${{ steps.detect-updates.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Determine what was removed"
        id: detect-removals
        run: |
            deleted=$(git diff --name-only --no-renames --diff-filter=D ${{ github.event.pull_request.base.sha }} -- packages/*/meta.json)
            MATRIX="{\"package\":["
            for PKG in ${deleted}; do
              PKG=${PKG%"/meta.json"}
              PKG=${PKG#"packages/"}
              echo "${PKG}"
              MATRIX="${MATRIX}\"${PKG}\","
            done
            MATRIX="${MATRIX}]}"
            echo "MATRIX=${MATRIX}" # For debugging a log
            echo "::set-output name=matrix::$MATRIX"

      - name: "Determine what was added or modified"
        id: detect-updates
        run: |
            added=$(git diff --name-only --no-renames --diff-filter=A ${{ github.event.pull_request.base.sha }} -- packages/*/meta.json)
            modified=$(git diff --name-only --no-renames --diff-filter=M ${{ github.event.pull_request.base.sha }} -- packages/*/meta.json)
            MATRIX="{\"package\":["
            for PKG in ${added} ${modified}; do
              PKG=${PKG%"/meta.json"}
              PKG=${PKG#"packages/"}
              echo "${PKG}"
              MATRIX="${MATRIX}\"${PKG}\","
            done
            MATRIX="${MATRIX}]}"
            echo "MATRIX=${MATRIX}" # For debugging a log
            echo "::set-output name=matrix::$MATRIX"

  remove-package:
    name: "Remove ${{ matrix.package }}"
    if: ${{ needs.detect-changes.outputs.remove-matrix != '{"package":[]}' }}
    needs: detect-changes
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.detect-changes.outputs.remove-matrix) }}
    steps:
      - uses: actions/checkout@v2

      - name: "Install package distribution tools"
        run: |
          python -m pip install -r tools/requirements.txt

      - name: "Check whether anything depends on the package"
        run: |
            echo "TODO"
            # TODO: could read all JSON files, look at the `NeededOtherPackages`
            # components, to see if anything else uses this package (no GAP needed!).
            # But beware, those lists contains package names that are not always lowercased.
            # TODO: should also SuggestedOtherPackages be considered?
            # TODO: add special case for GAPDoc, primgrp, transgrp, smallgrp?

  add-or-update-package:
    name: "Update ${{ matrix.package }}"
    if: ${{ needs.detect-changes.outputs.update-matrix != '{"package":[]}' }}
    needs: detect-changes
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.detect-changes.outputs.update-matrix) }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: "Install package distribution tools"
        run: |
          python -m pip install -r tools/requirements.txt

      - name: "Install GAP"
        uses: gap-actions/setup-gap@v2
        with:
          GAP_BOOTSTRAP: 'minimal'
          GAP_PKGS_TO_CLONE: 'json'
          GAP_PKGS_TO_BUILD: 'json'

      - name: "Symlink GAP into PATH"
        run: |
          ln -s $HOME/gap/bin/gap.sh /usr/local/bin/gap

      - name: "Obtain copy of old metadata, if any"
        run: |
          git cat-file blob ${{ github.event.pull_request.base.sha }}:packages/${{ matrix.package }}/meta.json > packages/${{ matrix.package }}/meta.json.old || :

      - name: "Validate metadata"
        run: |
            tools/validate_package.py ${{ matrix.package }}

      - name: "Install required binary dependencies"
        run: |
          deps=$(tools/gather_dependencies.py ${{ matrix.package }})
          if [[ -n "$deps" ]]; then
            echo "Installing required binary depedencies: $deps"
            sudo apt-get install --no-install-recommends $deps
          else
            echo "No required binary depedencies to be installed"
          fi

      - name: "Install and build package"
        run: |
          tools/download_dependencies.py ${{ matrix.package }}
          cd _unpacked_archives
          for file in * ; do
            ln -s "$PWD/$file" "/home/runner/gap/pkg/$file"
          done
          cd /home/runner/gap/pkg

          MAKEFLAGS=-j3 ../bin/BuildPackages.sh --strict

      - name: "Run package tests with minimal packages"
        run: |
            for pkg in ${{ matrix.package }}; do
                echo "FORCE_QUIT_GAP(TestPackage(\"$pkg\"));" | gap
            done

      # TODO: also test `LoadAllPackages` works!
      # TODO: perhaps: also run packages with `LoadAllPackages`?
      # TODO: ideally test both with last GAP release (but using the current package distro,
      #       and also with latest GAP nightly build)
